<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Groundbeef.Collections.Concurrent</name>
    </assembly>
    <members>
        <member name="T:Groundbeef.Collections.Concurrent.ConcurrentDictionaryExtention">
            <summary>
            Streamline add and remove methods on <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> with <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="M:Groundbeef.Collections.Concurrent.ConcurrentDictionaryExtention.Add``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0@,``1)">
            <summary>
            Adds the specified key and value to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>. If the key already exists overwrites the exisiting value.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Groundbeef.Collections.Concurrent.ConcurrentDictionaryExtention.Add``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            Adds the specified key and value to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>. If the key already exists overwrites the exisiting value.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="keyValuePair">The key value pair to add.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Groundbeef.Collections.Concurrent.ConcurrentDictionaryExtention.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0@)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the element to remove.</param>
            <returns><see cref="!:true"/> if the element is successfully found and removed; otherwise, <see cref="!:false"/>. This method returns <see cref="!:false"/> if key is not found in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Groundbeef.Collections.Concurrent.ConcurrentDictionaryExtention.AddRange``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}}@)">
            <summary>
            Adds a range of <see cref="T:System.Collections.Generic.KeyValuePair"/>s to the <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="keyValuePairs">The collection of <see cref="!:KeyValuePairs"/> to add.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="T:Groundbeef.Collections.Concurrent.ConcurrentMap`2">
            <summary>
            Represents a bi-directionally accessible, threadsafe dictionary implementation of <typeparam name="TForward"/> and <typeparam name="TReverse"/>.
            </summary>
            <typeparam name="TForward">The forward key, and reverse value type of the <see cref="!:ConcurrentMap"/>.</typeparam>
            <typeparam name="TReverse">The forward value, and reverse key type of the <see cref="!:ConcurrentMap"/>.</typeparam>
        </member>
        <member name="M:Groundbeef.Collections.Concurrent.ConcurrentMap`2.#ctor">
            <summary>
            Initializes a new instance of <see cref="!:ConcurrentMap"/> class.
            </summary>
        </member>
        <member name="M:Groundbeef.Collections.Concurrent.ConcurrentMap`2.Add(`0@,`1@)">
            <summary>
            Adds the specified key and value to the <see cref="!:ConcurrentMap"/>. If the key already exists overwrites the exisiting value.
            </summary>
            <param name="value1">The forward key, and reverse value.</param>
            <param name="value2">The forward value, and reverse key.</param>
        </member>
        <member name="M:Groundbeef.Collections.Concurrent.ConcurrentMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Adds the specified key and value to the <see cref="!:ConcurrentMap"/>. If the key already exists overwrites the exisiting value.
            </summary>
            <param name="value">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
        </member>
        <member name="P:Groundbeef.Collections.Concurrent.ConcurrentMap`2.Forward">
            <summary>
            Gets the threadsafe indexer with the <typeparam name="TForward"/> key and <typeparam name="TReverse"/> value.
            </summary>
        </member>
        <member name="P:Groundbeef.Collections.Concurrent.ConcurrentMap`2.Reverse">
            <summary>
            Gets the threadsafe indexer with the <typeparam name="TReverse"/> key and <typeparam name="TForward"/> value.
            </summary>
        </member>
        <member name="T:Groundbeef.Collections.Concurrent.ConcurrentIndexer`2">
            <summary>
            Represents a threadsafe wrapper class of <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> tailored for the needs of <see cref="!:ConcurrentMap"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Groundbeef.Collections.Concurrent.ConcurrentIndexer`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1}@)" -->
    </members>
</doc>
